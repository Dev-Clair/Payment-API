<?php

declare(strict_types=1);

namespace Payment_API\Entity;

use DateTimeImmutable;
use Payment_API\Interface\EntityInterface;
use Payment_API\Enums\MethodStatus;
use Payment_API\Enums\MethodType;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ORM\Table(name: 'methods')]
class MethodsEntity implements EntityInterface
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private int $id; // Method ID (Autogenerated)

    #[ORM\Column(type: 'string', nullable: false, length: 20)]
    private string $umid; // Unique Method Identifier

    #[ORM\Column(type: 'string', nullable: false, length: 150)]
    private string $method_name; // Method Name: GooglePay, ApplePay, AmazonPay

    #[ORM\Column(type: 'datetime', nullable: false, updatable: true)]
    private DateTimeImmutable $created_at; // Date and Time of Method Creation

    #[ORM\Column(type: 'string', nullable: false, columnDefinition: 'ENUM("active", "inactive")')]
    private MethodStatus $method_status; // Method Status

    #[ORM\Column(type: 'string', nullable: false, columnDefinition: 'ENUM("card", "bank")')]
    private MethodType $method_type; // Method Type

    public function __construct()
    {
        $this->created_at = new DateTimeImmutable('now');
        $this->method_status = MethodStatus::ACTIVE;
    }

    public function getID(): int
    {
        return $this->id;
    }

    public function getUMID(): string
    {
        return $this->umid;
    }

    public function setUMID(string $umid): void
    {
        $this->umid = $umid;
    }

    public function getMethodName(): string
    {
        return $this->method_name;
    }

    public function setMethodName(string $method_name): void
    {
        $this->method_name = $method_name;
    }

    public function getCreatedAt(): DateTimeImmutable
    {
        return $this->created_at;
    }

    public function getMethodStatus(): MethodStatus
    {
        return $this->method_status;
    }

    public function setMethodStatus(MethodStatus $method_status): void
    {
        $this->method_status = $method_status;
    }

    public function getMethodType(): MethodType
    {
        return $this->method_type;
    }

    public function setMethodType(MethodType $method_type): void
    {
        $this->method_type = $method_type;
    }
}
